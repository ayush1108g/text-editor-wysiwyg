{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n  name: 'formatBlock',\n  display: 'submenu',\n  add: function (core, targetElement) {\n    const context = core.context;\n    context.formatBlock = {\n      targetText: targetElement.querySelector('.txt'),\n      targetTooltip: targetElement.parentNode.querySelector('.se-tooltip-text'),\n      _formatList: null,\n      currentFormat: ''\n    };\n\n    /** set submenu */\n    let listDiv = this.setSubmenu(core);\n\n    /** add event listeners */\n    listDiv.querySelector('ul').addEventListener('click', this.pickUp.bind(core));\n    context.formatBlock._formatList = listDiv.querySelectorAll('li button');\n\n    /** append target button menu */\n    core.initMenuTarget(this.name, targetElement, listDiv);\n\n    /** empty memory */\n    listDiv = null;\n  },\n  setSubmenu: function (core) {\n    const option = core.options;\n    const lang_toolbar = core.lang.toolbar;\n    const listDiv = core.util.createElement('DIV');\n    listDiv.className = 'se-submenu se-list-layer se-list-format';\n    const defaultFormats = ['p', 'div', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n    const formatList = !option.formats || option.formats.length === 0 ? defaultFormats : option.formats;\n    let list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n    for (let i = 0, len = formatList.length, format, tagName, command, name, h, attrs, className; i < len; i++) {\n      format = formatList[i];\n      if (typeof format === 'string' && defaultFormats.indexOf(format) > -1) {\n        tagName = format.toLowerCase();\n        command = tagName === 'blockquote' ? 'range' : tagName === 'pre' ? 'free' : 'replace';\n        h = /^h/.test(tagName) ? tagName.match(/\\d+/)[0] : '';\n        name = lang_toolbar['tag_' + (h ? 'h' : tagName)] + h;\n        className = '';\n        attrs = '';\n      } else {\n        tagName = format.tag.toLowerCase();\n        command = format.command;\n        name = format.name || tagName;\n        className = format.class;\n        attrs = className ? ' class=\"' + className + '\"' : '';\n      }\n      list += '<li>' + '<button type=\"button\" class=\"se-btn-list\" data-command=\"' + command + '\" data-value=\"' + tagName + '\" data-class=\"' + className + '\" title=\"' + name + '\" aria-label=\"' + name + '\">' + '<' + tagName + attrs + '>' + name + '</' + tagName + '>' + '</button></li>';\n    }\n    list += '</ul></div>';\n    listDiv.innerHTML = list;\n    return listDiv;\n  },\n  /**\n  * @Override core\n  */\n  active: function (element) {\n    let formatTitle = this.lang.toolbar.formats;\n    const target = this.context.formatBlock.targetText;\n    if (!element) {\n      this.util.changeTxt(target, formatTitle);\n    } else if (this.util.isFormatElement(element)) {\n      const formatContext = this.context.formatBlock;\n      const formatList = formatContext._formatList;\n      const nodeName = element.nodeName.toLowerCase();\n      const className = (element.className.match(/(\\s|^)__se__format__[^\\s]+/) || [''])[0].trim();\n      for (let i = 0, len = formatList.length, f; i < len; i++) {\n        f = formatList[i];\n        if (nodeName === f.getAttribute('data-value') && className === f.getAttribute('data-class')) {\n          formatTitle = f.title;\n          break;\n        }\n      }\n      this.util.changeTxt(target, formatTitle);\n      target.setAttribute('data-value', nodeName);\n      target.setAttribute('data-class', className);\n      return true;\n    }\n    return false;\n  },\n  /**\n  * @Override submenu\n  */\n  on: function () {\n    const formatContext = this.context.formatBlock;\n    const formatList = formatContext._formatList;\n    const target = formatContext.targetText;\n    const currentFormat = (target.getAttribute('data-value') || '') + (target.getAttribute('data-class') || '');\n    if (currentFormat !== formatContext.currentFormat) {\n      for (let i = 0, len = formatList.length, f; i < len; i++) {\n        f = formatList[i];\n        if (currentFormat === f.getAttribute('data-value') + f.getAttribute('data-class')) {\n          this.util.addClass(f, 'active');\n        } else {\n          this.util.removeClass(f, 'active');\n        }\n      }\n      formatContext.currentFormat = currentFormat;\n    }\n  },\n  pickUp: function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    let target = e.target;\n    let command = null,\n      value = null,\n      tag = null,\n      className = '';\n    while (!command && !/UL/i.test(target.tagName)) {\n      command = target.getAttribute('data-command');\n      value = target.getAttribute('data-value');\n      className = target.getAttribute('data-class');\n      if (command) {\n        tag = target.firstChild;\n        break;\n      }\n      target = target.parentNode;\n    }\n    if (!command) return;\n\n    // blockquote\n    if (command === 'range') {\n      const rangeElement = tag.cloneNode(false);\n      this.applyRangeFormatElement(rangeElement);\n    }\n    // free, replace\n    else {\n      let range = this.getRange();\n      let selectedFormsts = this.getSelectedElementsAndComponents(false);\n      if (selectedFormsts.length === 0) {\n        range = this.getRange_addLine(range, null);\n        selectedFormsts = this.getSelectedElementsAndComponents(false);\n        if (selectedFormsts.length === 0) return;\n      }\n      const startOffset = range.startOffset;\n      const endOffset = range.endOffset;\n      const util = this.util;\n      let first = selectedFormsts[0];\n      let last = selectedFormsts[selectedFormsts.length - 1];\n      const firstPath = util.getNodePath(range.startContainer, first, null, null);\n      const lastPath = util.getNodePath(range.endContainer, last, null, null);\n\n      // remove selected list\n      const rlist = this.detachList(selectedFormsts, false);\n      if (rlist.sc) first = rlist.sc;\n      if (rlist.ec) last = rlist.ec;\n\n      // change format tag\n      this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n      const modifiedFormsts = this.getSelectedElementsAndComponents(false);\n\n      // free format\n      if (command === 'free') {\n        const len = modifiedFormsts.length - 1;\n        let parentNode = modifiedFormsts[len].parentNode;\n        let freeElement = tag.cloneNode(false);\n        const focusElement = freeElement;\n        for (let i = len, f, html, before, next, inner, isComp, first = true; i >= 0; i--) {\n          f = modifiedFormsts[i];\n          if (f === (!modifiedFormsts[i + 1] ? null : modifiedFormsts[i + 1].parentNode)) continue;\n          isComp = util.isComponent(f);\n          html = isComp ? '' : f.innerHTML.replace(/(?!>)\\s+(?=<)|\\n/g, ' ');\n          before = util.getParentElement(f, function (current) {\n            return current.parentNode === parentNode;\n          });\n          if (parentNode !== f.parentNode || isComp) {\n            if (util.isFormatElement(parentNode)) {\n              parentNode.parentNode.insertBefore(freeElement, parentNode.nextSibling);\n              parentNode = parentNode.parentNode;\n            } else {\n              parentNode.insertBefore(freeElement, before ? before.nextSibling : null);\n              parentNode = f.parentNode;\n            }\n            next = freeElement.nextSibling;\n            if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n              freeElement.innerHTML += '<BR>' + next.innerHTML;\n              util.removeItem(next);\n            }\n            freeElement = tag.cloneNode(false);\n            first = true;\n          }\n          inner = freeElement.innerHTML;\n          freeElement.innerHTML = (first || !html || !inner || /<br>$/i.test(html) ? html : html + '<BR>') + inner;\n          if (i === 0) {\n            parentNode.insertBefore(freeElement, f);\n            next = f.nextSibling;\n            if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n              freeElement.innerHTML += '<BR>' + next.innerHTML;\n              util.removeItem(next);\n            }\n            const prev = freeElement.previousSibling;\n            if (prev && freeElement.nodeName === prev.nodeName && util.isSameAttributes(freeElement, prev)) {\n              prev.innerHTML += '<BR>' + freeElement.innerHTML;\n              util.removeItem(freeElement);\n            }\n          }\n          if (!isComp) util.removeItem(f);\n          if (!!html) first = false;\n        }\n        this.setRange(focusElement, 0, focusElement, 0);\n      }\n      // replace format\n      else {\n        for (let i = 0, len = modifiedFormsts.length, node, newFormat; i < len; i++) {\n          node = modifiedFormsts[i];\n          if ((node.nodeName.toLowerCase() !== value.toLowerCase() || (node.className.match(/(\\s|^)__se__format__[^\\s]+/) || [''])[0].trim() !== className) && !util.isComponent(node)) {\n            newFormat = tag.cloneNode(false);\n            util.copyFormatAttributes(newFormat, node);\n            newFormat.innerHTML = node.innerHTML;\n            node.parentNode.replaceChild(newFormat, node);\n          }\n          if (i === 0) first = newFormat || node;\n          if (i === len - 1) last = newFormat || node;\n          newFormat = null;\n        }\n        this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n      }\n\n      // history stack\n      this.history.push(false);\n    }\n    this.submenuOff();\n  }\n};","map":{"version":3,"names":["name","display","add","core","targetElement","context","formatBlock","targetText","querySelector","targetTooltip","parentNode","_formatList","currentFormat","listDiv","setSubmenu","addEventListener","pickUp","bind","querySelectorAll","initMenuTarget","option","options","lang_toolbar","lang","toolbar","util","createElement","className","defaultFormats","formatList","formats","length","list","i","len","format","tagName","command","h","attrs","indexOf","toLowerCase","test","match","tag","class","innerHTML","active","element","formatTitle","target","changeTxt","isFormatElement","formatContext","nodeName","trim","f","getAttribute","title","setAttribute","on","addClass","removeClass","e","preventDefault","stopPropagation","value","firstChild","rangeElement","cloneNode","applyRangeFormatElement","range","getRange","selectedFormsts","getSelectedElementsAndComponents","getRange_addLine","startOffset","endOffset","first","last","firstPath","getNodePath","startContainer","lastPath","endContainer","rlist","detachList","sc","ec","setRange","getNodeFromPath","modifiedFormsts","freeElement","focusElement","html","before","next","inner","isComp","isComponent","replace","getParentElement","current","insertBefore","nextSibling","isSameAttributes","removeItem","prev","previousSibling","node","newFormat","copyFormatAttributes","replaceChild","history","push","submenuOff"],"sources":["E:/Programming/React/New folder (2)/dynamicArt/dynamic-article/node_modules/suneditor/src/plugins/submenu/formatBlock.js"],"sourcesContent":["/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n    name: 'formatBlock',\n    display: 'submenu',\n    add: function (core, targetElement) {\n        const context = core.context;\n        context.formatBlock = {\n            targetText: targetElement.querySelector('.txt'),\n            targetTooltip: targetElement.parentNode.querySelector('.se-tooltip-text'),\n            _formatList: null,\n            currentFormat: ''\n        };\n\n        /** set submenu */\n        let listDiv = this.setSubmenu(core);\n\n        /** add event listeners */\n        listDiv.querySelector('ul').addEventListener('click', this.pickUp.bind(core));\n        context.formatBlock._formatList = listDiv.querySelectorAll('li button');\n\n        /** append target button menu */\n        core.initMenuTarget(this.name, targetElement, listDiv);\n\n        /** empty memory */\n        listDiv = null;\n    },\n\n    setSubmenu: function (core) {\n        const option = core.options;\n        const lang_toolbar = core.lang.toolbar;\n        const listDiv = core.util.createElement('DIV');\n        listDiv.className = 'se-submenu se-list-layer se-list-format';\n\n        const defaultFormats = ['p', 'div', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n        const formatList = !option.formats || option.formats.length === 0 ? defaultFormats : option.formats;\n\n        let list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n        for (let i = 0, len = formatList.length, format, tagName, command, name, h, attrs, className; i < len; i++) {\n            format = formatList[i];\n            \n            if (typeof format === 'string' && defaultFormats.indexOf(format) > -1) {\n                tagName = format.toLowerCase();\n                command = tagName === 'blockquote' ? 'range' : tagName === 'pre' ? 'free' : 'replace';\n                h = /^h/.test(tagName) ? tagName.match(/\\d+/)[0] : '';\n                name = lang_toolbar['tag_' + (h ? 'h' : tagName)] + h;\n                className = '';\n                attrs = '';\n            } else {\n                tagName = format.tag.toLowerCase();\n                command = format.command;\n                name = format.name || tagName;\n                className = format.class;\n                attrs = className ? ' class=\"' + className + '\"' : '';\n            }\n\n            list += '<li>' +\n                '<button type=\"button\" class=\"se-btn-list\" data-command=\"' + command + '\" data-value=\"' + tagName + '\" data-class=\"' + className + '\" title=\"' + name + '\" aria-label=\"' + name + '\">' +\n                    '<' + tagName + attrs + '>' + name + '</' + tagName + '>' +\n                '</button></li>';\n        }\n        list += '</ul></div>';\n\n        listDiv.innerHTML = list;\n\n        return listDiv;\n    },\n\n     /**\n     * @Override core\n     */\n    active: function (element) {\n        let formatTitle = this.lang.toolbar.formats;\n        const target = this.context.formatBlock.targetText;\n\n        if (!element) {\n            this.util.changeTxt(target, formatTitle);\n        } else if (this.util.isFormatElement(element)) {\n            const formatContext = this.context.formatBlock;\n            const formatList = formatContext._formatList;\n            const nodeName = element.nodeName.toLowerCase();\n            const className = (element.className.match(/(\\s|^)__se__format__[^\\s]+/) || [''])[0].trim();\n\n            for (let i = 0, len = formatList.length, f; i < len; i++) {\n                f = formatList[i];\n                if (nodeName === f.getAttribute('data-value') && className === f.getAttribute('data-class')) {\n                    formatTitle = f.title;\n                    break;\n                }\n            }\n\n            this.util.changeTxt(target, formatTitle);\n            target.setAttribute('data-value', nodeName);\n            target.setAttribute('data-class', className);\n\n            return true;\n        }\n\n        return false;\n    },\n\n     /**\n     * @Override submenu\n     */\n    on: function () {\n        const formatContext = this.context.formatBlock;\n        const formatList = formatContext._formatList;\n        const target = formatContext.targetText;\n        const currentFormat = (target.getAttribute('data-value') || '') + (target.getAttribute('data-class') || '');\n\n        if (currentFormat !== formatContext.currentFormat) {\n            for (let i = 0, len = formatList.length, f; i < len; i++) {\n                f = formatList[i];\n                if (currentFormat === f.getAttribute('data-value') + f.getAttribute('data-class')) {\n                    this.util.addClass(f, 'active');\n                } else {\n                    this.util.removeClass(f, 'active');\n                }\n            }\n\n            formatContext.currentFormat = currentFormat;\n        }\n    },\n\n    pickUp: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        let target = e.target;\n        let command = null, value = null, tag = null, className = '';\n        \n        while (!command && !/UL/i.test(target.tagName)) {\n            command = target.getAttribute('data-command');\n            value = target.getAttribute('data-value');\n            className = target.getAttribute('data-class');\n            if (command) {\n                tag = target.firstChild;\n                break;\n            }\n            target = target.parentNode;\n        }\n\n        if (!command) return;\n\n        // blockquote\n        if (command === 'range') {\n            const rangeElement = tag.cloneNode(false);\n            this.applyRangeFormatElement(rangeElement);\n        }\n        // free, replace\n        else {\n            let range = this.getRange();\n            let selectedFormsts = this.getSelectedElementsAndComponents(false);\n\n            if (selectedFormsts.length === 0) {\n                range = this.getRange_addLine(range, null);\n                selectedFormsts = this.getSelectedElementsAndComponents(false);\n                if (selectedFormsts.length === 0) return;\n            }\n\n            const startOffset = range.startOffset;\n            const endOffset = range.endOffset;\n\n            const util = this.util;\n            let first = selectedFormsts[0];\n            let last = selectedFormsts[selectedFormsts.length - 1];\n            const firstPath = util.getNodePath(range.startContainer, first, null, null);\n            const lastPath = util.getNodePath(range.endContainer, last, null, null);\n            \n            // remove selected list\n            const rlist = this.detachList(selectedFormsts, false);\n            if (rlist.sc) first = rlist.sc;\n            if (rlist.ec) last = rlist.ec;\n\n            // change format tag\n            this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n            const modifiedFormsts = this.getSelectedElementsAndComponents(false);\n\n            // free format\n            if (command === 'free') {\n                const len = modifiedFormsts.length - 1;\n                let parentNode = modifiedFormsts[len].parentNode;\n                let freeElement = tag.cloneNode(false);\n                const focusElement = freeElement;\n    \n                for (let i = len, f, html, before, next, inner, isComp, first = true; i >= 0; i--) {\n                    f = modifiedFormsts[i];\n                    if (f === (!modifiedFormsts[i + 1] ? null : modifiedFormsts[i + 1].parentNode)) continue;\n    \n                    isComp = util.isComponent(f);\n                    html = isComp ? '' : f.innerHTML.replace(/(?!>)\\s+(?=<)|\\n/g, ' ');\n                    before = util.getParentElement(f, function (current) {\n                        return current.parentNode === parentNode;\n                    });\n    \n                    if (parentNode !== f.parentNode || isComp) {\n                        if (util.isFormatElement(parentNode)) {\n                            parentNode.parentNode.insertBefore(freeElement, parentNode.nextSibling);\n                            parentNode = parentNode.parentNode;\n                        } else {\n                            parentNode.insertBefore(freeElement, before ? before.nextSibling : null);\n                            parentNode = f.parentNode;\n                        }\n\n                        next = freeElement.nextSibling;\n                        if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n                            freeElement.innerHTML += '<BR>' + next.innerHTML;\n                            util.removeItem(next);\n                        }\n\n                        freeElement = tag.cloneNode(false);\n                        first = true;\n                    }\n    \n                    inner = freeElement.innerHTML;\n                    freeElement.innerHTML = ((first || !html || !inner || /<br>$/i.test(html)) ? html : html + '<BR>') + inner;\n\n                    if (i === 0) {\n                        parentNode.insertBefore(freeElement, f);\n                        next = f.nextSibling;\n                        if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n                            freeElement.innerHTML += '<BR>' + next.innerHTML;\n                            util.removeItem(next);\n                        }\n\n                        const prev = freeElement.previousSibling;\n                        if (prev && freeElement.nodeName === prev.nodeName && util.isSameAttributes(freeElement, prev)) {\n                            prev.innerHTML += '<BR>' + freeElement.innerHTML;\n                            util.removeItem(freeElement);\n                        }\n                    }\n\n                    if (!isComp) util.removeItem(f);\n                    if (!!html) first = false;\n                }\n    \n                this.setRange(focusElement, 0, focusElement, 0);\n            }\n            // replace format\n            else {\n                for (let i = 0, len = modifiedFormsts.length, node, newFormat; i < len; i++) {\n                    node = modifiedFormsts[i];\n                    \n                    if ((node.nodeName.toLowerCase() !== value.toLowerCase() || (node.className.match(/(\\s|^)__se__format__[^\\s]+/) || [''])[0].trim() !== className) && !util.isComponent(node)) {\n                        newFormat = tag.cloneNode(false);\n                        util.copyFormatAttributes(newFormat, node);\n                        newFormat.innerHTML = node.innerHTML;\n    \n                        node.parentNode.replaceChild(newFormat, node);\n                    }\n    \n                    if (i === 0) first = newFormat || node;\n                    if (i === len - 1) last = newFormat || node;\n                    newFormat = null;\n                }\n    \n                this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n            }\n\n            // history stack\n            this.history.push(false);\n        }\n\n        this.submenuOff();\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}